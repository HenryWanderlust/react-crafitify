{"version":3,"file":"Pagination.stories-d13d6cc3.js","sources":["../../Pagination/Pagination.tsx"],"sourcesContent":["import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\r\nimport { IconButton } from \"../IconButton\";\r\nimport styles from \"./Pagination.module.scss\";\r\n\r\nexport type PaginationVariant = \"primary\" | \"secondary\";\r\n\r\nexport interface PaginationProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  /**\r\n   * The current page to display for the Pagination\r\n   */\r\n  currentPage: number;\r\n  /**\r\n   * The callback fired when changing the page\r\n   */\r\n  onChangePage: (page: number) => void;\r\n  /**\r\n   * The amount of pages for the Pagination\r\n   */\r\n  pages: number;\r\n  /**\r\n   * The variant for the Pagination\r\n   *\r\n   * @default \"secondary\"\r\n   */\r\n  variant?: PaginationVariant;\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationProps> = (props) => {\r\n  const {\r\n    className,\r\n    currentPage,\r\n    onChangePage,\r\n    pages,\r\n    variant = \"secondary\",\r\n    ...rest\r\n  } = props;\r\n\r\n  const decreasePage = () => {\r\n    if (currentPage - 1 > 0) {\r\n      onChangePage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const increasePage = () => {\r\n    if (currentPage + 1 < pages + 1) {\r\n      onChangePage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={classNames(styles.paginationContainer, className)}\r\n      role=\"navigation\"\r\n      {...rest}\r\n    >\r\n      <IconButton\r\n        className={classNames(styles.paginationIconButton)}\r\n        content={<MdChevronLeft />}\r\n        onClick={decreasePage}\r\n        disabled={currentPage === 1}\r\n        variant={variant}\r\n      />\r\n      <div className={styles.pagesButtonsContainer}>\r\n        {currentPage - 2 > 0 ? (\r\n          <IconButton\r\n            className={classNames(\r\n              styles.paginationIconButton,\r\n              styles.ellipse\r\n            )}\r\n            tabIndex={-1}\r\n            variant={variant}\r\n          >\r\n            ...\r\n          </IconButton>\r\n        ) : (\r\n          <div style={{ height: \"38px\", width: \"38px\" }} />\r\n        )}\r\n        {Array.from({ length: pages }, (_, i) => i + 1).map(\r\n          (page, index) => {\r\n            if (\r\n              (page === currentPage - 1 ||\r\n                page === currentPage + 1) &&\r\n              page !== 0\r\n            ) {\r\n              return (\r\n                <IconButton\r\n                  className={classNames(styles.paginationIconButton)}\r\n                  key={index}\r\n                  onClick={() => onChangePage(page)}\r\n                  variant={variant}\r\n                >\r\n                  {page}\r\n                </IconButton>\r\n              );\r\n            } else if (page === currentPage) {\r\n              return (\r\n                <IconButton\r\n                  className={classNames(\r\n                    page === 1 && styles.firstPage,\r\n                    page === pages && styles.lastPage,\r\n                    styles.paginationIconButton,\r\n                    styles.currentPageIcon\r\n                  )}\r\n                  key={index}\r\n                  tabIndex={-1}\r\n                  variant={variant}\r\n                >\r\n                  {page}\r\n                </IconButton>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n        )}\r\n        {currentPage + 1 < pages ? (\r\n          <IconButton\r\n            className={classNames(\r\n              styles.paginationIconButton,\r\n              styles.ellipse\r\n            )}\r\n            tabIndex={-1}\r\n            variant={variant}\r\n          >\r\n            ...\r\n          </IconButton>\r\n        ) : (\r\n          <div style={{ height: \"38px\", width: \"38px\" }} />\r\n        )}\r\n      </div>\r\n      <IconButton\r\n        className={classNames(styles.paginationIconButton)}\r\n        content={<MdChevronRight />}\r\n        onClick={increasePage}\r\n        disabled={currentPage === pages}\r\n        variant={variant}\r\n      />\r\n    </nav>\r\n  );\r\n};\r\n"],"names":["Pagination","props","className","currentPage","onChangePage","pages","variant","rest","decreasePage","increasePage","jsxs","classNames","styles","jsx","IconButton","MdChevronLeft","_","i","page","index","MdChevronRight"],"mappings":"8oBA8BaA,EAAyCC,GAAU,CACxD,KAAA,CACJ,UAAAC,EACA,YAAAC,EACA,aAAAC,EACA,MAAAC,EACA,QAAAC,EAAU,YACV,GAAGC,CACD,EAAAN,EAEEO,EAAe,IAAM,CACrBL,EAAc,EAAI,GACpBC,EAAaD,EAAc,CAAC,CAC9B,EAGIM,EAAe,IAAM,CACrBN,EAAc,EAAIE,EAAQ,GAC5BD,EAAaD,EAAc,CAAC,CAC9B,EAIA,OAAAO,EAAC,MAAA,CACC,UAAWC,EAAWC,EAAO,oBAAqBV,CAAS,EAC3D,KAAK,aACJ,GAAGK,EAEJ,SAAA,CAAAM,EAACC,EAAA,CACC,UAAWH,EAAWC,EAAO,oBAAoB,EACjD,UAAUG,EAAc,EAAA,EACxB,QAASP,EACT,SAAUL,IAAgB,EAC1B,QAAAG,CAAA,CACF,EACCI,EAAA,MAAA,CAAI,UAAWE,EAAO,sBACpB,SAAA,CAAAT,EAAc,EAAI,EACjBU,EAACC,EAAA,CACC,UAAWH,EACTC,EAAO,qBACPA,EAAO,OACT,EACA,SAAU,GACV,QAAAN,EACD,SAAA,KAAA,CAAA,IAIA,MAAI,CAAA,MAAO,CAAE,OAAQ,OAAQ,MAAO,MAAA,EAAU,EAEhD,MAAM,KAAK,CAAE,OAAQD,CAAS,EAAA,CAACW,EAAGC,IAAMA,EAAI,CAAC,EAAE,IAC9C,CAACC,EAAMC,KAEFD,IAASf,EAAc,GACtBe,IAASf,EAAc,IACzBe,IAAS,EAGPL,EAACC,EAAA,CACC,UAAWH,EAAWC,EAAO,oBAAoB,EAEjD,QAAS,IAAMR,EAAac,CAAI,EAChC,QAAAZ,EAEC,SAAAY,CAAA,EAJIC,CAAA,EAOAD,IAASf,EAEhBU,EAACC,EAAA,CACC,UAAWH,EACTO,IAAS,GAAKN,EAAO,UACrBM,IAASb,GAASO,EAAO,SACzBA,EAAO,qBACPA,EAAO,eACT,EAEA,SAAU,GACV,QAAAN,EAEC,SAAAY,CAAA,EAJIC,CAAA,EAQF,IAGb,EACChB,EAAc,EAAIE,EACjBQ,EAACC,EAAA,CACC,UAAWH,EACTC,EAAO,qBACPA,EAAO,OACT,EACA,SAAU,GACV,QAAAN,EACD,SAAA,KAAA,CAAA,IAIA,MAAI,CAAA,MAAO,CAAE,OAAQ,OAAQ,MAAO,MAAA,EAAU,CAAA,EAEnD,EACAO,EAACC,EAAA,CACC,UAAWH,EAAWC,EAAO,oBAAoB,EACjD,UAAUQ,EAAe,EAAA,EACzB,QAASX,EACT,SAAUN,IAAgBE,EAC1B,QAAAC,CAAA,CACF,CAAA,CAAA,CAAA,CAGN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}