{"version":3,"file":"Ripple-55b24a9a.js","sources":["../../Ripple/Ripple.tsx"],"sourcesContent":["import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\nimport styles from \"./Ripple.module.scss\";\r\n\r\nexport interface RippleInstanceCoordinates {\r\n  x?: number;\r\n  y?: number;\r\n  size?: number;\r\n}\r\n\r\nexport type RipplePosition = \"center\" | \"cursor\";\r\n\r\nexport interface RippleProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  /**\r\n   * The color of the Ripple\r\n   */\r\n  color?: string;\r\n  /**\r\n   * The duration of the Ripple\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * The position of the Ripple relative to its container\r\n   *\r\n   * @default \"cursor\"\r\n   */\r\n  position?: RipplePosition;\r\n}\r\n\r\nexport const Ripple: React.FC<RippleProps> = (props) => {\r\n  const {\r\n    className,\r\n    color = \"#381438\",\r\n    duration = 1300,\r\n    position = \"cursor\",\r\n    ...rest\r\n  } = props;\r\n  const [rippleArray, setRippleArray] = React.useState<\r\n    Array<RippleInstanceCoordinates>\r\n  >([]);\r\n\r\n  const addRipple = (event: React.MouseEvent) => {\r\n    const rippleContainer =\r\n      event.currentTarget.getBoundingClientRect();\r\n    const size =\r\n      rippleContainer.width > rippleContainer.height\r\n        ? rippleContainer.width\r\n        : rippleContainer.height;\r\n\r\n    let x, y;\r\n\r\n    if (position === \"cursor\") {\r\n      x = event.pageX - rippleContainer.x - size / 2;\r\n      y = event.pageY - rippleContainer.y - size / 2;\r\n    } else {\r\n      x = 0;\r\n      y = 0;\r\n    }\r\n\r\n    const newRipple: RippleInstanceCoordinates = {\r\n      x,\r\n      y,\r\n      size,\r\n    };\r\n\r\n    setRippleArray((prevRipples) => [...prevRipples, newRipple]);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames(styles.container, className)}\r\n      onMouseDown={addRipple}\r\n      role=\"presentation\"\r\n      {...rest}\r\n    >\r\n      {rippleArray.length > 0 &&\r\n        rippleArray.map(\r\n          (ripple: RippleInstanceCoordinates, index: number) => {\r\n            return (\r\n              <span\r\n                key={\"span\" + index}\r\n                role=\"presentation\"\r\n                style={{\r\n                  animationDuration: `${duration}ms`,\r\n                  backgroundColor: color,\r\n                  top: ripple.y,\r\n                  left: ripple.x,\r\n                  width: ripple.size,\r\n                  height: ripple.size,\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["Ripple","props","className","color","duration","position","rest","rippleArray","setRippleArray","React.useState","addRipple","event","rippleContainer","size","x","y","newRipple","prevRipples","jsx","classNames","styles","ripple","index"],"mappings":"wMA8BaA,EAAiCC,GAAU,CAChD,KAAA,CACJ,UAAAC,EACA,MAAAC,EAAQ,UACR,SAAAC,EAAW,KACX,SAAAC,EAAW,SACX,GAAGC,CACD,EAAAL,EACE,CAACM,EAAaC,CAAc,EAAIC,EAAM,SAE1C,CAAE,CAAA,EAEEC,EAAaC,GAA4B,CACvC,MAAAC,EACJD,EAAM,cAAc,sBAAsB,EACtCE,EACJD,EAAgB,MAAQA,EAAgB,OACpCA,EAAgB,MAChBA,EAAgB,OAEtB,IAAIE,EAAGC,EAEHV,IAAa,UACfS,EAAIH,EAAM,MAAQC,EAAgB,EAAIC,EAAO,EAC7CE,EAAIJ,EAAM,MAAQC,EAAgB,EAAIC,EAAO,IAEzCC,EAAA,EACAC,EAAA,GAGN,MAAMC,EAAuC,CAC3C,EAAAF,EACA,EAAAC,EACA,KAAAF,CAAA,EAGFL,EAAgBS,GAAgB,CAAC,GAAGA,EAAaD,CAAS,CAAC,CAAA,EAI3D,OAAAE,EAAC,MAAA,CACC,UAAWC,EAAWC,EAAO,UAAWlB,CAAS,EACjD,YAAaQ,EACb,KAAK,eACJ,GAAGJ,EAEH,SAAAC,EAAY,OAAS,GACpBA,EAAY,IACV,CAACc,EAAmCC,IAEhCJ,EAAC,OAAA,CAEC,KAAK,eACL,MAAO,CACL,kBAAmB,GAAGd,CAAQ,KAC9B,gBAAiBD,EACjB,IAAKkB,EAAO,EACZ,KAAMA,EAAO,EACb,MAAOA,EAAO,KACd,OAAQA,EAAO,IACjB,CAAA,EATK,OAASC,CAAA,CAatB,CAAA,CAAA,CAGR"}