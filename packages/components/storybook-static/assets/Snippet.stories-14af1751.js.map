{"version":3,"file":"Snippet.stories-14af1751.js","sources":["../../Snippet/Snippet.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport styles from \"./Snippet.module.scss\";\r\nimport { IconButton } from \"../IconButton\";\r\nimport { Typography } from \"../Typography\";\r\nimport { MdContentCopy } from \"react-icons/md\";\r\nimport { Popup } from \"../Popup/Popup\";\r\n\r\nexport interface SnippetProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  /**\r\n   * The content for the Snippet\r\n   */\r\n  children: string;\r\n  /**\r\n   * If the Popup has an indicator\r\n   *\r\n   * @default false\r\n   */\r\n  hasIndicator?: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n *\r\n * @description\r\n *\r\n * The Snippet is a piece of text that the user can copy.\r\n */\r\nexport const Snippet: React.FC<SnippetProps> = (props) => {\r\n  const {\r\n    children,\r\n    className,\r\n    hasIndicator = false,\r\n    ...rest\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\r\n\r\n  const [popupText, setPopupText] = React.useState<string>(\"Copy\");\r\n\r\n  return (\r\n    <div\r\n      className={classNames(styles.container, className)}\r\n      {...rest}\r\n    >\r\n      <Typography\r\n        className={styles.snippetColor}\r\n        style={{ userSelect: \"none\" }}\r\n        type=\"h1\"\r\n        variant=\"primary\"\r\n      >\r\n        $\r\n      </Typography>\r\n      <Typography type=\"h2\" variant=\"primary\">\r\n        {children}\r\n      </Typography>\r\n      <Popup\r\n        hasIndicator={hasIndicator}\r\n        isOpen={isOpen}\r\n        onClose={() => setIsOpen(false)}\r\n        onOpen={() => setIsOpen(true)}\r\n        text={popupText}\r\n      >\r\n        <IconButton\r\n          className={styles.snippetColor}\r\n          content={<MdContentCopy />}\r\n          onClick={() => {\r\n            navigator.clipboard.writeText(children);\r\n            setPopupText(\"Copied!\");\r\n          }}\r\n          variant=\"primary\"\r\n        />\r\n      </Popup>\r\n    </div>\r\n  );\r\n};\r\n\r\nSnippet.displayName = \"Snippet\";\r\n"],"names":["Snippet","props","children","className","hasIndicator","rest","isOpen","setIsOpen","React.useState","popupText","setPopupText","jsxs","classNames","styles","jsx","Typography","Popup","IconButton","MdContentCopy"],"mappings":"suBA6BaA,EAAmCC,GAAU,CAClD,KAAA,CACJ,SAAAC,EACA,UAAAC,EACA,aAAAC,EAAe,GACf,GAAGC,CACD,EAAAJ,EAEE,CAACK,EAAQC,CAAS,EAAIC,WAAwB,EAAK,EAEnD,CAACC,EAAWC,CAAY,EAAIF,WAAuB,MAAM,EAG7D,OAAAG,EAAC,MAAA,CACC,UAAWC,EAAWC,EAAO,UAAWV,CAAS,EAChD,GAAGE,EAEJ,SAAA,CAAAS,EAACC,EAAA,CACC,UAAWF,EAAO,aAClB,MAAO,CAAE,WAAY,MAAO,EAC5B,KAAK,KACL,QAAQ,UACT,SAAA,GAAA,CAED,IACCE,EAAW,CAAA,KAAK,KAAK,QAAQ,UAC3B,SAAAb,EACH,EACAY,EAACE,EAAA,CACC,aAAAZ,EACA,OAAAE,EACA,QAAS,IAAMC,EAAU,EAAK,EAC9B,OAAQ,IAAMA,EAAU,EAAI,EAC5B,KAAME,EAEN,SAAAK,EAACG,EAAA,CACC,UAAWJ,EAAO,aAClB,UAAUK,EAAc,EAAA,EACxB,QAAS,IAAM,CACH,UAAA,UAAU,UAAUhB,CAAQ,EACtCQ,EAAa,SAAS,CACxB,EACA,QAAQ,SAAA,CACV,CAAA,CACF,CAAA,CAAA,CAAA,CAGN,EAEAV,EAAQ,YAAc"}